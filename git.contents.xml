
<!--                                                                                    -->
<!-- Call github contents API to create, update, delete contents in repository          -->
<!-- Find "Git contents API" at https://developer.github.com/v3/repos/contents/         -->
<project name="git.update" basedir="." >
  <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
  <property file="safs.properties" />
  <property environment="env"/>

  <tstamp>
      <format property="RELEASE_TAG" pattern="yyyy.MM.dd_HH.mm"/>
  </tstamp>
	
  <!--                                                          -->
  <!-- create updatesafs.json for update.                       -->
  <!--                                                          -->
  <target name="create.updatesafs.json" description="Create safsupdate.json for GitHub SAFSDEV/UpdateSite/safs/SAFS.LIB.UPDATE.ZIP" >
    <!-- Get zip file's 'sha code' -->
    <var name="git.update.content.query" value="${git.update.safs.content.query}"/>
    <var name="git.update.content.filename" value="${git.update.safs.content.lib}" />
    <antcallback target="git.updatesite.file.token" return="exec.rc, exec.output, exec.error, git.update.file.sha"/>
    <!-- echo>${exec.output}</echo -->
    <!-- echo>exec.error: ${exec.error}</echo -->
    <!-- echo>exec.rc: ${exec.rc}</echo -->
	<!-- echo>git.update.file.sha: ${git.update.file.sha}</echo -->

  	<!-- convert the zip file to base64 encoded string -->
  	<var name="git.update.content.filename" value="${git.update.safs.content.path}${git.update.safs.content.lib}" />
  	<antcallback target="convert.to.base64string" return="java.rc, java.output, java.error, base64.encoded.content"/>
    <if>
  	  <equals arg1="${java.rc}" arg2="0" />
      <then>
        <echo>successfully convert file '${git.update.content.filename}' to base64 encoded string, which is stored in variable 'base64.encoded.content'.</echo>
        <!--echo>base64.encoded.content: ${base64.encoded.content}</echo-->
      </then>
  	  <else>
  		<fail message="${java.error}"/>
  	  </else>
    </if>

  	<!-- create file updatesafs.json -->
    <echo file="${git.update.safs.json}">
 {
   "message": "Automatically committed by script.",
   "committer": {
     "name": "safsdev",
     "email": "safsdev@sas.com"
   },
   "content": "${base64.encoded.content}",
   "sha": "${git.update.file.sha}"
 }
    </echo>
  </target>

  <!--                                                          -->
  <!-- Push SAFS update zip file into github                    -->
  <!--                                                          -->
  <target name="git.updatesite.safs" depends="create.updatesafs.json" description="Push SAFS update at GitHub SAFSDEV/UpdateSite/safs" >

      <!-- Prepare updatesafs.json file for udpating -->
      <!--antcall target="create.updatesafs.json"/-->
  	
      <!-- Update the zip file using updatesafs.json file -->
  	  <var name="git.update.json" value="${git.update.safs.json}"/>
  	  <var name="git.update.url" value="${git.update.safs.content.put}/${git.update.safs.content.lib}"/>
      <antcallback target="git.update.file" return="exec.rc, exec.output, exec.error"/>
  	  <echo>exec.rc: ${exec.rc}</echo>
  	  <!--echo>exec.output: ${exec.output}</echo-->
  	  <!--echo>exec.error: ${exec.error}</echo-->
  	
  </target>

	
  <!--=========================================================================================================-->
  <!--====================          common ant scripts to call as a function              =====================-->
  <!--=========================================================================================================-->
       
  <!--                                                                                      -->
  <!--                                  git.updatesite.file.token                           -->
  <!--                                                                                      -->
  <!--  Execute a GET request to retrieve the SHA code for a file in a repository directory -->
  <!--  https://developer.github.com/v3/repos/contents/#get-contents                        -->
  <!--                                                                                      -->
  <!--  Example command-line invocation:                                                    -->
  <!--                                                                                      -->
  <!--  curl -i -k -H "Content-Type: application/json" https://api.github.com/repos/safsdev/updatesite/contents/safs          -->
  <!--  curl -i -k -H "Content-Type: application/json" https://api.github.com/repos/safsdev/updatesite/contents/seleniumplus  -->
  <!--                                                                                      -->
  <!--  requires: ${git.update.content.query}       (the query URL as shown above)          -->
  <!--            ${git.update.content.filename}    (the name of the file in the directory  -->
  <!--                                               to get the SHA token for)              -->
  <!--                                                                                      -->
  <!--  Which will be used as shown below:                                                  -->
  <!--  curl -i -k -H "Content-Type: application/json" ${git.update.content.query}          -->
  <!--                                                                                      -->
  <!--  Then we parse the output to locate the file assets SHA token value.                 -->
  <!--                                                                                      -->
  <!--  return:   ${exec.rc}                                                                -->
  <!--            ${exec.output}                                                            -->
  <!--            ${exec.error}                                                             -->
  <!--            ${git.update.file.sha}                                                    -->
  <!--                                                                                      -->
  <!--                                                                                      -->
  <target name="git.updatesite.file.token" description="GET SHA token for a file in a repo. " >
      <!-- only echo following line during debug -->
      <!-- echo>curl -i -k -H "Content-Type: application/json" ${git.update.content.query}</echo -->
  	
      <exec executable="curl" 
            failifexecutionfails="true"
            failonerror="true"
	        resultproperty="exec.rc"
      	    outputproperty="exec.output"
            errorproperty="exec.error" >
            
          <arg value="-i"/>
          <arg value="-k"/>
          <arg value="-H"/>  
          <arg value="Content-Type: application/json"/>
          <arg value="${git.update.content.query}"/>
          
      </exec>

      <!-- We need to first find the portion of the response for our specific content.filename            -->
      <!-- Then we must find the "sha": value for that content filename.                                  -->
      <!-- This is only complicated by the fact that there can be more than 1 file in the response array. -->
	

      <propertyregex property="git.update.file.sha"
              input="${exec.output}"
              regexp='(/${git.update.content.filename}).*\n.*"sha": "(\w{40})'
              select="\2"
              casesensitive="false" />

  	  <!--echo>${exec.output}</echo-->
  	  <!-- only echo following line during debug -->
  	  <echo>For file ${git.update.content.filename}, the git.update.file.sha: ${git.update.file.sha}</echo>
  </target>
	
  <!--                                                                                      -->
  <!--                                  git.update.file                                     -->
  <!--                                                                                      -->
  <!--  Execute a put request to update a file in repository on github                     -->
  <!--  https://developer.github.com/v3/repos/contents/#update-a-file                       -->
  <!--                                                                                      -->
  <!--  Example command-line invocation:                                                    -->
  <!--                                                                                      -->
  <!--  curl -i -k -H "Content-Type: application/json" -H "Authorization: token OAUTH-TOKEN" -X PUT -d @updatesafs.json https://api.github.com/repos/safsdev/updatesite/contents/safs/SAFS.LIB.UPDATE.ZIP                          -->
  <!--  curl -i -k -H "Content-Type: application/json" -H "Authorization: token OAUTH-TOKEN" -X PUT -d @updateseleniumplus.json https://api.github.com/repos/safsdev/updatesite/contents/seleniumplus/SEPLUS.LIB.UPDATE.ZIP        -->
  <!--  curl -i -k -H "Content-Type: application/json" -H "Authorization: token OAUTH-TOKEN" -X PUT -d @updateseleniumplusplugin.json https://api.github.com/repos/safsdev/updatesite/contents/seleniumplus/SEPLUS.PLUGIN.UPDATE.ZIP     -->
  <!--                                                                                      -->
  <!--  requires:                                                                           -->
  <!--            ${env.git.usertoken}                                                      -->
  <!--            ${git.update.json}                                                        -->
  <!--            ${git.update.url}                                                         -->
  <!--                                                                                      -->
  <!--  Which will be used as shown below:                                                  -->
  <!--  curl -i -k -H "Content-Type: application/json" -H "Authorization: token ${env.git.usertoken}" -X PUT -d @${git.update.json} ${git.update.url}  -->
  <!--                                                                                      -->
  <!--  return:                                                                             -->
  <!--            ${exec.rc}                                                                -->
  <!--            ${exec.output}                                                            -->
  <!--            ${exec.error}                                                             -->
  <!--                                                                                      -->
  <!--                                                                                      -->
  <target name="git.update.file" description="Update a file in repository" >
      <!-- DO NOT show usertoken in the command line output, only echo following line during debug -->
      <echo>curl -i -k -H "Content-Type: application/json" -H "Authorization: token ${env.git.usertoken}" -X PUT -d @${git.update.json} ${git.update.url}</echo>
  	
      <exec executable="curl" 
            failifexecutionfails="true"
            failonerror="true"
	        resultproperty="exec.rc"
      	    outputproperty="exec.output"
            errorproperty="exec.error" >
            
          <arg value="-i"/>
          <arg value="-k"/>
          <arg value="-H"/>  
          <arg value="Content-Type: application/json"/>
          <arg value="-H"/>
          <arg value="Authorization: token ${env.git.usertoken}"/>
          <arg value="-X"/>  
          <arg value="PUT"/>
          <arg value="-d"/>
          <arg value="@${git.update.json}"/>
          <arg value="${git.update.url}"/>
          
      </exec>
  	
	  <!-- only echo following line during debug -->
	  <!--echo>${exec.output}</echo-->
  		
  </target>

  <!--                                                                                               -->
  <!--                           convert.to.base64string                                             -->
  <!--                                                                                               -->
  <!--  Call java org.w3c.tools.codec.BinaryFileEncoder to convert a file to base64 encoded string   -->
  <!--                                                                                               -->
  <!--  Example java invocation:                                                             -->
  <!--  java org.w3c.tools.codec.BinaryFileEncoder file.zip                                          -->
  <!--                                                                                               -->
  <!--  requires:                                                                                    -->
  <!--            ${git.update.content.filename}                                                     -->
  <!--                                                                                               -->
  <!--  Which will be used as shown below:                                                           -->
  <!--  java org.w3c.tools.codec.BinaryFileEncoder ${git.update.content.filename}                    -->
  <!--                                                                                               -->
  <!--  return:                                                                                      -->
  <!--            ${java.rc}                                                                         -->
  <!--            ${java.output}                                                                     -->
  <!--            ${java.error}                                                                      -->
  <!--            ${base64.encoded.content}                                                          -->
  <!--                                                                                               -->
  <!--                                                                                               -->
  <target name="convert.to.base64string"  description="Convert a file, such as SAFSDEV/UpdateSite/safs/SAFS.LIB.UPDATE.ZIP to a base64 encoded string." >
  	  <echo>git.update.content.filename: ${git.update.content.filename}</echo>

      <java classname="org.w3c.tools.codec.BinaryFileEncoder"
            fork="true"
	        resultproperty="java.rc"
      	    outputproperty="java.output"
            errorproperty="java.error" >
         <arg value="${git.update.content.filename}"/>
         <!--arg value="base64file.dat"/-->
         <jvmarg value="-Xms512M"/>
         <jvmarg value="-Xmx1024M"/>
         <classpath>
           <pathelement path="${java.class.path}"/>
         </classpath>
       </java>
  	
	  <!-- only echo following line during debug -->
	  <!--echo>java.rc: ${java.rc}</echo-->
	  <!--echo>java.output: ${java.output}</echo-->
	  <!--echo>java.error: ${java.error}</echo-->

      <var name="base64.encoded.content" value="${java.output}" />
  </target>

</project>
